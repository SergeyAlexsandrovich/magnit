{"version":3,"sources":["components/section-layout/SectionLayout.tsx","components/section-layout/index.ts","components/section-title/SectionTitle.tsx","components/section-title/index.ts","components/centered-section-item/CenteredGrid.tsx","components/centered-section-item/index.ts","components/list/EmptyList.tsx","components/list/index.ts","containers/templates/TemplateList.tsx","containers/templates/CreateTemplate.tsx","containers/templates/EditTemplate.tsx","containers/templates/index.ts"],"names":["SectionLayout","props","children","rest","Grid","container","direction","css","width","minHeight","displayName","SectionTitle","title","item","height","boxShadow","Paper","square","display","alignItems","theme","paddingLeft","spacing","paddingRight","xs","Typography","variant","component","CenteredGrid","flexDirection","justifyContent","EmptyList","button","justify","alignContent","marginBottom","align","color","colors","black","fontWeight","fontSize","xLarge","secondary","larger","columns","key","label","sortable","TemplateList","context","useContext","AppContext","useState","searchQuery","setSearchQuery","total","setTotal","rows","setRows","page","setPage","order","setOrder","orderBy","setOrderBy","redirect","to","setRedirect","fetchTemplatesAndSetState","useCallback","sort","sortBy","upperCaseSort","toUpperCase","getShortTemplates","courier","then","response","templates","map","template","createdAt","getFriendlyDate","Date","updatedAt","all","catch","console","error","useEffect","onDeleteTemplateCallback","id","deleteTemplate","setSnackbarState","open","message","setSnackbarError","renderMenuItems","row","onMenuClose","MenuItem","onClick","event","stopPropagation","updateTemplateListDebounced","_","debounce","onSearchQueryChangeCallback","value","target","onRequestSortCallback","empty","noThrow","hidden","Link","scheme","margin","paper","marginTop","padding","placeholder","fullWidth","onChange","radius","borderRadius","background","white","border","lightGray","transition","cursor","primary","div","input","onRequestSort","data","onRowClick","onChangePage","nextPage","CreateTemplate","sections","description","type","ETemplateType","LIGHT","setTemplate","setError","snackbar","setSnackbar","file","a","uploadFile","filename","process","deleteFile","createTemplate","disabled","maxWidth","maxTemplateWidth","position","opacity","pointerEvents","main","onAddAsset","onDeleteAsset","onClose","reason","setTimeout","EditTemplate","templateId","getTemplate","updateTemplate"],"mappings":"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","file":"static/js/2.d89aea1a.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const SectionLayout: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            css={{\n                width: \"100%\",\n                minHeight: \"100vh\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nSectionLayout.displayName = \"SectionLayout\";\n","export * from \"./SectionLayout\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\n\ninterface ISectionTitleProps {\n    title: string;\n}\n\nexport const SectionTitle: React.FC<ISectionTitleProps> = ({ title, children }) => {\n    return (\n        <Grid\n            item\n            css={{\n                height: \"var(--section-title-height)\",\n                boxShadow: \"0 6px 20px rgba(220, 227, 235, 0.3)\",\n            }}\n        >\n            <Paper\n                square={true}\n                css={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    boxShadow: \"none !important\",\n                }}\n            >\n                <Grid\n                    container\n                    css={theme => ({\n                        paddingLeft: theme.spacing(4),\n                        paddingRight: theme.spacing(4),\n                    })}\n                >\n                    <Grid item xs>\n                        <Typography variant=\"h4\" component=\"div\">\n                            <span>{title}</span>\n                        </Typography>\n                    </Grid>\n                    {children}\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n\nSectionTitle.displayName = \"SectionTitle\";\n","export * from \"./SectionTitle\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const CenteredGrid: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            item\n            xs\n            css={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nCenteredGrid.displayName = \"CenteredSectionItem\";\n","export * from \"./CenteredGrid\";\n","/** @jsx jsx */\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx } from \"@emotion/core\";\nimport { CenteredGrid } from \"components/centered-section-item\";\nimport * as React from \"react\";\n\ninterface IEmptyListProps {\n    title: string;\n    button?: React.ReactNode;\n}\n\nexport const EmptyList: React.FC<IEmptyListProps> = ({ title, button, children }) => {\n    return (\n        <CenteredGrid>\n            <Grid container justify=\"center\" alignContent=\"center\" direction=\"column\">\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.black,\n                            fontWeight: 500,\n                            fontSize: theme.fontSize.xLarge,\n                        })}\n                    >\n                        <span>{title}</span>\n                    </Typography>\n                </Grid>\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.secondary,\n                            fontSize: theme.colors.larger,\n                        })}\n                    >\n                        {children}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Grid container justify=\"center\" alignContent=\"center\">\n                        <Grid item>{button}</Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </CenteredGrid>\n    );\n};\n\nEmptyList.displayName = \"EmptyList\";\n","export * from \"./EmptyList\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button, IColumn, InputField, ITableDataItem, Table } from \"@magnit/components\";\nimport { AddIcon } from \"@magnit/icons\";\nimport { getFriendlyDate } from \"@magnit/services\";\nimport { Grid, MenuItem, Paper, Typography } from \"@material-ui/core\";\nimport { Link, Redirect, RouteComponentProps } from \"@reach/router\";\nimport { EmptyList } from \"components/list\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n    deleteTemplate,\n    getShortTemplates,\n    TShortTemplate,\n    TShortTemplateSortKeys,\n} from \"services/api/templates\";\n\nconst columns: IColumn[] = [\n    { key: \"title\", label: \"Название шаблона\", sortable: true },\n    { key: \"description\", label: \"Описание\", sortable: true },\n    { key: \"createdAt\", label: \"Дата создания\", sortable: true },\n    { key: \"updatedAt\", label: \"Дата редактирования\", sortable: true },\n];\n\ninterface IUpdateTemplateListOptions {\n    sort?: \"asc\" | \"desc\";\n    sortBy?: TShortTemplateSortKeys;\n    title?: string;\n}\n\nexport interface ITemplateListProps extends RouteComponentProps {}\n\nexport const TemplateList: React.FC<ITemplateListProps> = () => {\n    const context = useContext(AppContext);\n\n    // full text search\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    // table\n    const [total, setTotal] = useState(0);\n    const [rows, setRows] = useState<TShortTemplate[]>([]);\n    const [page, setPage] = useState(0);\n    const [order, setOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n    const [orderBy, setOrderBy] = useState<TShortTemplateSortKeys>(\"\");\n\n    // redirect to row\n    const [redirect, setRedirect] = useState({ redirect: false, to: \"\" });\n\n    const fetchTemplatesAndSetState = useCallback(\n        ({ title, sort, sortBy }: IUpdateTemplateListOptions = {}) => {\n            // filtered\n            const upperCaseSort = (sort || \"ASC\").toUpperCase() as \"ASC\" | \"DESC\";\n            getShortTemplates(context.courier, title, upperCaseSort, sortBy)\n                .then(response => {\n                    setRows(\n                        response.templates.map(template => ({\n                            ...template,\n                            createdAt: getFriendlyDate(new Date(template.createdAt!), true),\n                            updatedAt: getFriendlyDate(new Date(template.updatedAt!), true),\n                        })),\n                    );\n                    setTotal(response.all);\n                })\n                .catch(console.error);\n        },\n        [context.courier],\n    );\n\n    useEffect(() => {\n        // reset table\n        setPage(0);\n        setOrder(\"asc\");\n        setOrderBy(\"\");\n        // reset search query\n        setSearchQuery(\"\");\n        // fetch templates\n        fetchTemplatesAndSetState();\n    }, [context.courier, fetchTemplatesAndSetState]);\n\n    function onRowClick(row?: ITableDataItem) {\n        if (!row) {\n            return;\n        }\n        setRedirect({ redirect: true, to: row.id });\n    }\n\n    function onChangePage(nextPage: number) {\n        setPage(nextPage);\n    }\n\n    const onDeleteTemplateCallback = useCallback(\n        (id: number) => {\n            deleteTemplate(context.courier, id)\n                .then(() => {\n                    fetchTemplatesAndSetState();\n                    context.setSnackbarState({ open: true, message: \"Шаблон успешно удалён\" });\n                })\n                .catch(() => {\n                    context.setSnackbarError(true);\n                    context.setSnackbarState({ open: true, message: \"Не удалось удалить шаблон\" });\n                });\n        },\n        [context, fetchTemplatesAndSetState],\n    );\n\n    const renderMenuItems = useCallback(\n        (row: ITableDataItem, onMenuClose: () => void) => {\n            function onDeleteClick(event: React.MouseEvent<HTMLLIElement>) {\n                event.stopPropagation();\n                onDeleteTemplateCallback(row.id);\n                onMenuClose();\n            }\n\n            return [\n                <MenuItem key={row.id} onClick={onDeleteClick}>\n                    Удалить\n                </MenuItem>,\n            ];\n        },\n        [onDeleteTemplateCallback],\n    );\n\n    const updateTemplateListDebounced = _.debounce(fetchTemplatesAndSetState, 150);\n\n    const onSearchQueryChangeCallback = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const value = event.target.value;\n            setSearchQuery(value);\n            updateTemplateListDebounced({\n                title: value,\n                sort: order,\n                sortBy: orderBy,\n            });\n        },\n        [order, orderBy, updateTemplateListDebounced],\n    );\n\n    const onRequestSortCallback = useCallback(\n        (sort: \"asc\" | \"desc\", sortBy: keyof TShortTemplate) => {\n            setOrder(sort);\n            setOrderBy(sortBy);\n            fetchTemplatesAndSetState({ title: searchQuery, sort, sortBy });\n        },\n        [fetchTemplatesAndSetState, searchQuery],\n    );\n\n    const empty = !total;\n\n    return (\n        <SectionLayout>\n            {redirect.redirect && <Redirect to={`templates/edit/${redirect.to}`} noThrow />}\n            <SectionTitle title=\"Список шаблонов\">\n                <Grid item hidden={empty}>\n                    <Button component={Link} to=\"create\" variant=\"contained\" scheme=\"blue\">\n                        <AddIcon />\n                        <Typography>Создать шаблон</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            {empty && (\n                <EmptyList\n                    title=\"Шаблонов нет\"\n                    button={\n                        <Button component={Link} to=\"create\" scheme=\"blue\">\n                            <AddIcon />\n                            <Typography>Создать шаблон</Typography>\n                        </Button>\n                    }\n                >\n                    <div>Для создания шаблона нажмите кнопку</div>\n                    <div>Создать шаблон</div>\n                </EmptyList>\n            )}\n            {!empty && (\n                <Paper\n                    square={true}\n                    css={({ spacing, boxShadow }) => ({\n                        margin: spacing(3),\n                        boxShadow: boxShadow.paper,\n                    })}\n                >\n                    <Grid\n                        container\n                        direction=\"row\"\n                        css={theme => ({ marginTop: theme.spacing(2) })}\n                    >\n                        <Grid\n                            container\n                            direction=\"column\"\n                            css={theme => ({ padding: theme.spacing(3) })}\n                        >\n                            <Grid container direction=\"row\" spacing={2}>\n                                <Grid\n                                    item\n                                    xs\n                                    css={theme => ({ padding: `0 ${theme.spacing(6)} !important` })}\n                                >\n                                    <InputField\n                                        value={searchQuery}\n                                        placeholder=\"Поиск ...\"\n                                        fullWidth\n                                        onChange={onSearchQueryChangeCallback}\n                                        css={({ colors, radius, spacing }) => ({\n                                            borderRadius: radius(5),\n                                            background: colors.white,\n                                            border: `1px solid ${colors.lightGray}`,\n                                            transition: \"border 0.25s ease-in-out\",\n                                            cursor: \"pointer\",\n                                            \":hover, :active\": {\n                                                border: `1px solid ${colors.primary}`,\n                                            },\n                                            div: {\n                                                \":before, :after\": { border: \"none !important\" },\n                                            },\n                                            input: { padding: `${spacing(2)} ${spacing(4)}` },\n                                        })}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid item css={theme => ({ padding: theme.spacing(3) })}>\n                                <Table\n                                    page={page}\n                                    order={order}\n                                    orderBy={orderBy}\n                                    onRequestSort={onRequestSortCallback}\n                                    columns={columns}\n                                    renderMenuItems={renderMenuItems}\n                                    data={rows}\n                                    onRowClick={onRowClick}\n                                    onChangePage={onChangePage}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { ETemplateType, ITemplate } from \"@magnit/entities\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { TemplateEditor } from \"@magnit/template-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport * as React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { deleteFile, uploadFile } from \"services/api/assets\";\nimport { createTemplate } from \"services/api/templates\";\n\nexport interface ICreateTemplateProps extends RouteComponentProps {}\n\nexport const CreateTemplate: React.FC<ICreateTemplateProps> = () => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<ITemplate>({\n        id: 0,\n        sections: [],\n        title: \"\",\n        description: \"\",\n        type: ETemplateType.LIGHT,\n    });\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: \"\",\n    }); // open/close snackbar\n\n    function onTemplateChange(template: ITemplate) {\n        setTemplate({ ...template });\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: \"\" });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        createTemplate(context.courier, template)\n            .then(() => setSnackbar({ open: true, message: \"Шаблон успешно сохранён!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка сохранения шаблона!\" });\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Создание шаблона\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"green\"\n                        onClick={onTemplateSave}\n                        disabled={snackbar.open}\n                    >\n                        <CheckIcon />\n                        <Typography>Сохранить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    opacity: snackbar.open ? 0.5 : 1,\n                    transition: \"opacity 0.3s ease-in-out\",\n                    pointerEvents: snackbar.open ? \"none\" : \"initial\",\n                })}\n            >\n                <TemplateEditor\n                    template={template}\n                    css={theme => ({ background: theme.colors.main })}\n                    onChange={onTemplateChange}\n                    onAddAsset={onAddAsset}\n                    onDeleteAsset={onDeleteAsset}\n                />\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { ETemplateType, ITemplate } from \"@magnit/entities\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { TemplateEditor } from \"@magnit/template-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { deleteFile, getTemplate, updateTemplate, uploadFile } from \"services/api\";\n\nexport interface IEditTemplateProps {\n    templateId: number;\n}\n\nexport const EditTemplate: React.FC<IEditTemplateProps> = ({ templateId }) => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<ITemplate>({\n        id: 0,\n        sections: [],\n        title: \"\",\n        description: \"\",\n        type: ETemplateType.LIGHT,\n    });\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: \"\",\n    }); // open/close snackbar\n\n    useEffect(() => {\n        getTemplate(context.courier, templateId)\n            .then(response => setTemplate(response.template))\n            .catch(console.error);\n    }, [context.courier, templateId]);\n\n    function onTemplateChange(template: ITemplate) {\n        setTemplate({ ...template });\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: \"\" });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        updateTemplate(context.courier, templateId, template)\n            .then(() => setSnackbar({ open: true, message: \"Шаблон успешно обновлён!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка обновления шаблона!\" });\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Редактирование шаблона\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"blue\"\n                        onClick={onTemplateSave}\n                        disabled={snackbar.open}\n                    >\n                        <CheckIcon />\n                        <Typography>Обновить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    transition: \"opacity 0.3s ease-in-out\",\n                })}\n            >\n                <TemplateEditor\n                    template={template}\n                    css={theme => ({ background: theme.colors.main })}\n                    onChange={onTemplateChange}\n                    onAddAsset={onAddAsset}\n                    onDeleteAsset={onDeleteAsset}\n                />\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n","export * from \"./TemplateList\";\nexport * from \"./CreateTemplate\";\nexport * from \"./EditTemplate\";\n"],"sourceRoot":""}